상속은 부모 클래스를 기반으로 자식 클래스를 만드는 것
ex) 몬스터 -> 오크 -> 오크(전사, 마법사 등등..)

상속에만 의존하면 오히려 기존코드를 재사용하기 힘든 경우가 발생할수있음
부모 클래스에는 자식클래스에 공통적으로 필요한 기능을 구현
부모 클래스의 기존 기능이 나중에 구현한 자식 클래스의 기능과 충돌 가능성
- 이런 문제를 해결하려면 컴포넌트 패턴을 사용

컴포넌트 패턴
유니티는 게임 오브젝트를 컴포넌트 패턴을 사용해 만듬
컴포넌트 패턴(컴포지션 패턴) - 미리 만들어진 부품을 조립하여 완성된 오브젝트를 만드는 방식
ex)각각의 기능을 따로따로 (컴포넌트)로 만들어 놓고 하나의 빈 게임 오브젝트에 원하는 방식으로 그 기능을 합쳐서 조립하는 방식
유연한 재사용 가능 / 기획자의 프로그래머 의존도 낮아짐 / 독립성 덕분에 기능 추가와 삭제가 쉬움
컴포넌트는 스스로 동작하는 독립적인 부품이기 때문에 다른 컴포넌트에 영향 X

MonoBehaviour
유니티의 모든 컴포넌트는 MonoBehaviour를 확장하여 만들어짐
메세지 기반 방식 - 컴포넌트들은 서로 관심이 없고 독립적이기 때문에 유니티는 컴포넌트의 어떤 기능을 실행시키고자 할때 메세지를 날리는 방식을 사용한다

유니티 이벤트 메소드
브로드캐스팅은 메시지를 무차별적으로 뿌리는 것
메세지와 브로드캐스팅은 Start(), Update(), OnTriggerEnter()등의 유니티 이벤트 메소드가 동작하는 원리

Time.deltaTime과 Time.time의 차이
- Time.time은 선언된 시점부터 경과한 시간 / Time.deltaTime은 마지막 프레임부터 현 프레임까지 경과한 시간
